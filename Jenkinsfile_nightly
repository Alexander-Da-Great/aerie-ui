pipeline {
  options {
    disableConcurrentBuilds()
  }
  agent {
    label 'CAE-Jenkins2-DH-Agents-Linux'
  }
  environment {
        TESTRAIL_API_KEY = credentials('testrail-api-key')
        TESTRAIL_SUITE_ID = 4213
        TESTRAIL_URL = "https://cae-testrail.jpl.nasa.gov/testrail/"
        TESTRAIL_USERNAME = credentials('testrail-username')
  }
  stages {
    stage('Enter Docker Container') {
      agent {
        docker {
          reuseNode true
            registryUrl 'https://artifactory.jpl.nasa.gov:16001'
            registryCredentialsId 'Artifactory-credential'
            image 'gov/nasa/jpl/ammos/mpsa/aerie/jenkins/aerie-ui-nightly:latest'
            alwaysPull true
            args "-u root --mount type=bind,source=${WORKSPACE},target=/home --workdir=/home"
        }
      }
      stages {
        stage ('test') {
          steps {
            withCredentials([
              usernamePassword(
                credentialsId: '34c6de8f-197d-46e5-aeb3-2153697dcb9c',
                passwordVariable: 'PASS',
                usernameVariable: 'EMAIL'
              )
            ]) {
              sh '''
              # Don't echo commands by default
              set +x

              # Setup ENV
              export PATH=/usr/local/bin:/usr/bin
              export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:/usr/lib64:/usr/lib

              # Setup NVM/Node.js
              export NVM_DIR="\$HOME/.nvm"
              if [ ! -d \$NVM_DIR ]; then
                curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash
              fi
              [ -s "\$NVM_DIR/nvm.sh" ] && . "\$NVM_DIR/nvm.sh"
              nvm install v12.14.1

              # Setup NPM to fetch from Artifactory
              npm config set @gov.nasa.jpl.aerie:registry=https://artifactory.jpl.nasa.gov/artifactory/api/npm/npm-release-virtual/
              npm config set email=$EMAIL
              npm config set always-auth=true
              npm config set _auth=$PASS

              # Install dependencies, test, and build
              npm install
              npm test
              '''
            }
          }
        }
        stage('testrail') {
          steps {
            sh '''
            echo "Uploading test results to test rail."
            ls -la
            cd /scripts/testrail
            ./main.py /home/unit-test-results.xml ${TESTRAIL_SUITE_ID}
            '''
          }
        }
      }
      post {
        cleanup {
          cleanWs()
          deleteDir()
        }
      }
    }
  }
  post {
    unstable {
      emailext subject: "Jenkins UNSTABLE: ${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}",
      body: """
          <p>Jenkins job unstable (failed tests): <br> <a href=\"${env.BUILD_URL}\">${env.JOB_NAME} #${env.BUILD_NUMBER}</a></p>
      """,
      mimeType: 'text/html',
      recipientProviders: [[$class: 'FailingTestSuspectsRecipientProvider']]
    }
    failure {
      emailext subject: "Jenkins FAILURE: ${env.JOB_BASE_NAME} #${env.BUILD_NUMBER}",
      body: """
          <p>Jenkins job failure: <br> <a href=\"${env.BUILD_URL}\">${env.JOB_NAME} #${env.BUILD_NUMBER}</a></p>
      """,
      mimeType: 'text/html',
      recipientProviders: [[$class: 'CulpritsRecipientProvider']]
    }
    cleanup {
      cleanWs()
      deleteDir()
    }
  }
}
