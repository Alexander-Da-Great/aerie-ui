const { execSync } = require('child_process');
const { writeFileSync } = require('fs');

function getBranch() {
  const branch = execSync('git rev-parse --abbrev-ref HEAD');
  return branch.toString().trim();
}

function getCommit() {
  const commit = execSync('git rev-parse --short HEAD');
  return commit.toString().trim();
}

function getTag(branch, commit) {
  if (process.env.SEQBASETAG) {
    // Use SEQBASETAG environment variable for Jenkins build if it exists.
    return process.env.SEQBASETAG;
  } else {
    // Mimic creation of SEQBASETAG env variable for local builds.
    const branchVersion = branch.replace(/\//g, '_').replace(/^release_/g, '');
    const buildNumber = 0;
    const date = new Date();
    const year = date.getFullYear();
    const month = `${date.getMonth() + 1}`.padStart(2, '0');
    const day = `${date.getDate()}`.padStart(2, '0');
    return `${branchVersion}_b${buildNumber}_r${commit}_${year}${month}${day}`;
  }
}

function main() {
  const branch = getBranch();
  const commit = getCommit();
  const tag = getTag(branch, commit);

  const content = [
    `// This file is automatically generated by the 'git.version.ts' script.`,
    `export const version = {`,
    `  packageJsonName: '${process.env.npm_package_name}',`,
    `  packageJsonVersion: '${process.env.npm_package_version}',`,
    `  tag: '${tag}',`,
    `};\n`,
  ].join('\n');

  console.log(content);

  writeFileSync('src/environments/version.ts', content, { encoding: 'utf8' });
}

main();
